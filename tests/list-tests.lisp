;;; -*- lisp -*-

(in-package :ru.bazon.bazon-collections-tests)

(defun test-add-object (list-class list element-function de-e)
  (dolist (object '(7 7 8 9))
    (add-object list (funcall element-function object)))
  (ensure-same 7 (funcall de-e (get-object-at list 0))
	       :report (report-name list-class "7 is at 0"))
  (ensure-same 7 (funcall de-e (get-object-at list 1))
	       :report (report-name list-class "7 is at 1"))
  (ensure-same 8 (funcall de-e (get-object-at list 2))
	       :report (report-name list-class "8 is at 2"))
  (ensure-same 9 (funcall de-e (get-object-at list 3))
	       :report (report-name list-class "9 is at 3")))

(defun test-index-of (list-class list element-function)
  (ensure-same 2 (index-of list (funcall element-function 8))
	       :report (report-name list-class "2 is index-of 8")))

(defun test-set-object-at (list-class list element-function de-e)
  (set-object-at list 1 (funcall element-function 10))
  (ensure-same 10 (funcall de-e (get-object-at list 1))
	       :report (report-name list-class "10 is at 1 after set")))

(defun test-list (list-class
		  constructor-function element-function de-e)
  (let ((list (funcall constructor-function)))
    (test-add-object list-class list element-function de-e) ; (7 7 8 9)
    (test-index-of list-class list element-function) ; (7 7 8 9)
    (test-set-object-at list-class list element-function de-e) ; (7 10 8 9)
    
    
    (insert-object-before list 1 (funcall element-function 11))
    (insert-object-after list 2 (funcall element-function 12))
    (ensure-same 11 (funcall de-e (get-object-at list 1))
		 :report (report-name list-class "11 is at 1 after insert b"))
    (ensure-same 12 (funcall de-e (get-object-at list 3))
		 :report (report-name list-class "12 is at 1 after insert a"))
    (ensure-same 6 (size list)
		 :report (report-name list-class "size 6 after insert 11, 12"))
    (insert-all-objects-before list 6 (mapcar element-function '(1 2)))
    (ensure-same 1 (funcall de-e (get-object-at list 6))
		 :report (report-name list-class "1 is at 6 after insert b a"))
    (ensure-same 2 (funcall de-e (get-object-at list 7))
		 :report (report-name list-class "2 is at 7 after insert b a"))
    (insert-all-objects-after list 7 (mapcar element-function '(3 4)))
    (ensure-same 3 (funcall de-e (get-object-at list 8))
		 :report (report-name list-class "3 is at 8 after insert a a"))
    (ensure-same 4 (funcall de-e (get-object-at list 9))
		 :report (report-name list-class "4 is at 9 after insert a a"))
    (let ((add-collection (funcall constructor-function)))
      (add-all-objects add-collection (mapcar element-function '(15 16)))
      (insert-all-objects-before list 0 add-collection)
      (ensure-same 15 (funcall de-e (get-object-at list 0))
		   :report (report-name list-class "15 is at 0 after insert b a"))
      (ensure-same 16 (funcall de-e (get-object-at list 1))
		   :report (report-name list-class "16 is at 1 after insert b a"))
      (ensure-same 7 (funcall de-e (get-object-at list 2))
		   :report (report-name list-class "7 is at 2 after insert b a")))
    (let ((add-collection (funcall constructor-function)))
      (add-all-objects add-collection (mapcar element-function '(17 18)))
      (insert-all-objects-after list -1 add-collection)
      (ensure-same 17 (funcall de-e (get-object-at list 0))
		   :report (report-name list-class "17 is at 0 after insert a a"))
      (ensure-same 18 (funcall de-e (get-object-at list 1))
		   :report (report-name list-class "18 is at 1 after insert a a"))
      (ensure-same 15 (funcall de-e (get-object-at list 2))
		   :report (report-name list-class "15 is at 2 after insert a a")))
    (insert-all-objects-before
     list 0
     (make-instance 'built-in-list-iterator
		    :list (mapcar element-function '(19 20))))
    (ensure-same 19 (funcall de-e (get-object-at list 0))
		 :report (report-name list-class "19 is at 0 after insert b a"))
    (ensure-same 20 (funcall de-e (get-object-at list 1))
		 :report (report-name list-class "20 is at 1 after insert b a"))
    (ensure-same 17 (funcall de-e (get-object-at list 2))
		 :report (report-name list-class "17 is at 2 after insert b a"))
    (insert-all-objects-after
     list 0
     (make-instance 'built-in-list-iterator
		    :list (mapcar element-function '(21 22))))
    (ensure-same 19 (funcall de-e (get-object-at list 0))
		 :report (report-name list-class "19 is at 0 after insert a a"))
    (ensure-same 21 (funcall de-e (get-object-at list 1))
		 :report (report-name list-class "21 is at 1 after insert a a"))
    (ensure-same 22 (funcall de-e (get-object-at list 2))
		 :report (report-name list-class "22 is at 2 after insert a a"))
    (ensure-same 20 (funcall de-e (get-object-at list 3))
		 :report (report-name list-class "23 is at 3 after insert a a"))
    (remove-object-at list 0)
    (ensure-same 21 (funcall de-e (get-object-at list 0))
		 :report (report-name list-class "21 is at 0 after remove at 0"))))
