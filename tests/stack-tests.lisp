;;; -*- lisp -*-

(in-package :ru.bazon.bazon-collections-tests)

(defun test-stack-push-object (stack-class constructor-function element-function de-e)
  (let ((stack (funcall constructor-function)))
    (push-object stack (funcall element-function 1))
    (push-object stack (funcall element-function 2))
    (ensure-same 2 (size stack)
		 :report (report-name stack-class "size 1 after push 1, 2"))
    (let ((iterator (c-it (iterator stack))))
      (it-next iterator)
      (ensure-same 2 (funcall de-e (it-current iterator))
		   :report (report-name stack-class "2 is first after push 1, 2"))
      (it-next iterator)
      (ensure-same 1 (funcall de-e (it-current iterator))
		   :report (report-name stack-class "1 is second after push 1, 2")))))

(defun test-stack-add-object (stack-class constructor-function element-function de-e)
  (let ((stack (funcall constructor-function)))
    (add-object stack (funcall element-function 1))
    (add-object stack (funcall element-function 2))
    (ensure-same 2 (size stack)
		 :report (report-name stack-class "size 1 after add 1, 2"))
    (let ((iterator (c-it (iterator stack))))
      (it-next iterator)
      (ensure-same 2 (funcall de-e (it-current iterator))
		   :report (report-name stack-class "2 is first after add 1, 2"))
      (it-next iterator)
      (ensure-same 1 (funcall de-e (it-current iterator))
		   :report (report-name stack-class "1 is second after add 1, 2")))))

(defun test-stack-add-all-objects (stack-class constructor-function element-function de-e)
  (let ((stack (funcall constructor-function)))
    (add-all-objects stack (mapcar element-function '(1 2)))
    (ensure-same 2 (size stack)
		 :report (report-name stack-class "size 1 after add-all 1, 2"))
    (let ((iterator (c-it (iterator stack))))
      (it-next iterator)
      (ensure-same 2 (funcall de-e (it-current iterator))
		   :report (report-name stack-class "2 is first after add-all 1, 2"))
      (it-next iterator)
      (ensure-same 1 (funcall de-e (it-current iterator))
		   :report (report-name stack-class "1 is second after add-all 1, 2")))))

(defun test-stack-pop-object (stack-class constructor-function element-function de-e)
  (let ((stack (funcall constructor-function)))
    (push-object stack (funcall element-function 1))
    (push-object stack (funcall element-function 2))
    (ensure-same 2 (size stack)
		 :report (report-name stack-class "size 2 after push 1, 2 (pop test)"))
    (ensure-same 2 (funcall de-e (pop-object stack))
		 :report (report-name stack-class "2 is first pop after push 1, 2"))
    (ensure-same 1 (size stack)
		 :report (report-name stack-class "size 1 after pop 1"))
    (ensure-same 1 (funcall de-e (pop-object stack))
		 :report (report-name stack-class "1 is second pop after push 1, 2"))
    (ensure-same 0 (size stack)
		 :report (report-name stack-class "size 0 after pop 2"))
    (ensure-same nil (pop-object stack)
		 :report (report-name stack-class "nil if pop empty stack"))
    (ensure-same 0 (size stack)
		 :report (report-name stack-class "size 0 after pop nil"))))

(defun test-stack-pull-object (stack-class constructor-function element-function de-e)
  (let ((stack (funcall constructor-function)))
    (push-object stack (funcall element-function 1))
    (push-object stack (funcall element-function 2))
    (ensure-same 2 (size stack)
		 :report (report-name stack-class "size 2 after push 1, 2 (pull test)"))
    (ensure-same 2 (funcall de-e (pull-object stack))
		 :report (report-name stack-class "2 is first pull after push 1, 2"))
    (ensure-same 1 (size stack)
		 :report (report-name stack-class "size 1 after pull 1"))
    (ensure-same 1 (funcall de-e (pull-object stack))
		 :report (report-name stack-class "1 is second pull after push 1, 2"))
    (ensure-same 0 (size stack)
		 :report (report-name stack-class "size 0 after pull 2"))
    (ensure-same nil (pull-object stack)
		 :report (report-name stack-class "nil if pull empty stack"))
    (ensure-same 0 (size stack)
		 :report (report-name stack-class "size 0 after pull nil"))))

(defun test-stack-peek-objects (stack-class constructor-function element-function de-e)
  (let ((stack (funcall constructor-function)))
    (ensure-same nil (peek-object stack)
		 :report (report-name stack-class "nil if peek empty stack"))
    (push-object stack (funcall element-function 1))
    (ensure-same 1 (funcall de-e (peek-object stack))
		 :report (report-name stack-class "1 is first peek after pop 1"))
    (push-object stack (funcall element-function 2))
    (ensure-same 2 (funcall de-e (peek-object stack))
		 :report (report-name stack-class "2 is first peek after pop 2"))
    (pop-object stack)
    (ensure-same 1 (funcall de-e (peek-object stack))
		 :report (report-name stack-class "1 is first peek after pop 1"))
    (pop-object stack)
    (ensure-same nil (peek-object stack)
		 :report (report-name stack-class "nil if peek empty stack after all pop"))))

(defun test-stack (stack-class
		   constructor-function element-function de-e)
  (test-stack-push-object stack-class constructor-function element-function de-e)
  (test-stack-add-object stack-class constructor-function element-function de-e)
  (test-stack-add-all-objects stack-class constructor-function element-function de-e)
  (test-stack-pop-object stack-class constructor-function element-function de-e)
  (test-stack-pull-object stack-class constructor-function element-function de-e)
  (test-stack-peek-objects stack-class constructor-function element-function de-e))
