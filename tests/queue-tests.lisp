;;; -*- lisp -*-

(in-package :ru.bazon.bazon-collections-tests)

(defun test-queue-enqueue-object (queue-class constructor-function element-function de-e)
  (let ((queue (funcall constructor-function)))
    (enqueue-object queue (funcall element-function 1))
    (enqueue-object queue (funcall element-function 2))
    (ensure-same 2 (size queue)
		 :report (report-name queue-class "size 1 after enqueue 1, 2"))
    (let ((iterator (c-it (iterator queue))))
      (it-next iterator)
      (ensure-same 1 (funcall de-e (it-current iterator))
		   :report (report-name queue-class "1 is first after enqueue 1, 2"))
      (it-next iterator)
      (ensure-same 2 (funcall de-e (it-current iterator))
		   :report (report-name queue-class "2 is second after enqueue 1, 2")))))

(defun test-queue-add-object (queue-class constructor-function element-function de-e)
  (let ((queue (funcall constructor-function)))
    (add-object queue (funcall element-function 1))
    (add-object queue (funcall element-function 2))
    (ensure-same 2 (size queue)
		 :report (report-name queue-class "size 1 after add 1, 2"))
    (let ((iterator (c-it (iterator queue))))
      (it-next iterator)
      (ensure-same 1 (funcall de-e (it-current iterator))
		   :report (report-name queue-class "1 is first after add 1, 2"))
      (it-next iterator)
      (ensure-same 2 (funcall de-e (it-current iterator))
		   :report (report-name queue-class "2 is second after add 1, 2")))))

(defun test-queue-add-all-objects (queue-class constructor-function element-function de-e)
  (let ((queue (funcall constructor-function)))
    (add-all-objects queue (mapcar element-function '(1 2)))
    (ensure-same 2 (size queue)
		 :report (report-name queue-class "size 1 after add-all 1, 2"))
    (let ((iterator (c-it (iterator queue))))
      (it-next iterator)
      (ensure-same 1 (funcall de-e (it-current iterator))
		   :report (report-name queue-class "1 is first after add-all 1, 2"))
      (it-next iterator)
      (ensure-same 2 (funcall de-e (it-current iterator))
		   :report (report-name queue-class "2 is second after add-all 1, 2")))))

(defun test-queue-dequeue-object (queue-class constructor-function element-function de-e)
  (let ((queue (funcall constructor-function)))
    (enqueue-object queue (funcall element-function 1))
    (enqueue-object queue (funcall element-function 2))
    (ensure-same 2 (size queue)
		 :report (report-name queue-class "size 2 after enqueue 1, 2 (dequeue test)"))
    (ensure-same 1 (funcall de-e (dequeue-object queue))
		 :report (report-name queue-class "1 is first dequeue after enqueue 1, 2"))
    (ensure-same 1 (size queue)
		 :report (report-name queue-class "size 1 after dequeue 1"))
    (ensure-same 2 (funcall de-e (dequeue-object queue))
		 :report (report-name queue-class "2 is second dequeue after enqueue 1, 2"))
    (ensure-same 0 (size queue)
		 :report (report-name queue-class "size 1 after dequeue 2"))
    (ensure-same nil (dequeue-object queue)
		 :report (report-name queue-class "nil if dequeue empty queue"))))

(defun test-queue-pull-object (queue-class constructor-function element-function de-e)
  (let ((queue (funcall constructor-function)))
    (enqueue-object queue (funcall element-function 1))
    (enqueue-object queue (funcall element-function 2))
    (ensure-same 2 (size queue)
		 :report (report-name queue-class "size 2 after enqueue 1, 2 (pull test)"))
    (ensure-same 1 (funcall de-e (pull-object queue))
		 :report (report-name queue-class "1 is first pull after enqueue 1, 2"))
    (ensure-same 1 (size queue)
		 :report (report-name queue-class "size 1 after pull 1"))
    (ensure-same 2 (funcall de-e (pull-object queue))
		 :report (report-name queue-class "2 is second pull after enqueue 1, 2"))
    (ensure-same 0 (size queue)
		 :report (report-name queue-class "size 1 after pull 2"))
    (ensure-same nil (pull-object queue)
		 :report (report-name queue-class "nil if pull empty queue"))))

(defun test-queue-peek-objects (queue-class constructor-function element-function de-e)
  (let ((queue (funcall constructor-function)))
    (ensure-same nil (peek-object queue)
		 :report (report-name queue-class "nil if peek empty queue"))
    (enqueue-object queue (funcall element-function 1))
    (ensure-same 1 (funcall de-e (peek-object queue))
		 :report (report-name queue-class "1 is first peek after enqueue 1"))
    (enqueue-object queue (funcall element-function 2))
    (ensure-same 1 (funcall de-e (peek-object queue))
		 :report (report-name queue-class "1 still first peek after enqueue 2"))
    (dequeue-object queue)
    (ensure-same 2 (funcall de-e (peek-object queue))
		 :report (report-name queue-class "2 is first peek after dequeue 1"))
    (dequeue-object queue)
    (ensure-same nil (peek-object queue)
		 :report (report-name queue-class "nil if peek empty queue after all dequeue"))))

(defun test-queue (queue-class
		   constructor-function element-function de-e)
  (test-queue-enqueue-object queue-class constructor-function element-function de-e)
  (test-queue-add-object queue-class constructor-function element-function de-e)
  (test-queue-add-all-objects queue-class constructor-function element-function de-e)
  (test-queue-dequeue-object queue-class constructor-function element-function de-e)
  (test-queue-pull-object queue-class constructor-function element-function de-e)
  (test-queue-peek-objects queue-class constructor-function element-function de-e))
