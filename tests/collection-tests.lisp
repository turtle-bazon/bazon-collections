;;; -*- lisp -*-

(in-package :ru.bazon.bazon-collections-tests)

(defun report-name (collection-class name)
  (format nil "~a: ~a" collection-class name))

(defun test-collection (collection-class
			constructor-function element-function de-e)
  (let ((collection (funcall constructor-function)))
    (ensure-same 0 (size collection)
		 :report (report-name collection-class "size 0"))
    (ensure-same t (empty-p collection)
		 :report (report-name collection-class "empty at begin"))
    (add-object collection (funcall element-function 0))
    (ensure-same 1 (size collection)
		 :report (report-name collection-class "size 1 after add 0"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after add 0"))
    (ensure-same t (contains collection (funcall element-function 0))
		 :report (report-name collection-class "contains added 0"))
    (ensure-same 0 (funcall de-e (it-current (find-object collection (funcall element-function 0))))
		 :report (report-name collection-class "0 is that one found by iterator"))
    (clear collection)
    (ensure-same 0 (size collection)
		 :report (report-name collection-class "size 0 after clear"))
    (ensure-same t (empty-p collection)
		 :report (report-name collection-class "empty after clear"))
    (add-object collection (funcall element-function 0))
    (add-object collection (funcall element-function 1))
    (ensure-same 1 (funcall de-e (it-current (find-object collection (funcall element-function 1))))
		 :report (report-name collection-class "1 is that one found by iterator"))
    (ensure-same 2 (size collection)
		 :report (report-name collection-class "size 2 after add 0, 1"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after add 0, 1"))
    (remove-object collection (funcall element-function 0))
    (ensure-same 1 (size collection)
		 :report (report-name collection-class "size 1 after remove 0"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after remove 0"))
    (ensure-same nil (find-object collection (funcall element-function 0))
		 :report (report-name collection-class "0 not found after removing it"))
    (add-all-objects collection (mapcar element-function '(2 3 4)))
    (ensure-same 4 (size collection)
		 :report (report-name collection-class "size 4 after add 2, 3, 4"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after add 2, 3, 4"))
    (remove-all-objects collection (mapcar element-function '(1 2 3)))
    (ensure-same 1 (size collection)
		 :report (report-name collection-class "size 1 after remove 1, 2, 3"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after remove 1, 2, 3"))
    (let ((add-collection (funcall constructor-function))
	  (remove-collection (funcall constructor-function)))
      (add-all-objects add-collection (mapcar element-function '(5 6 7)))
      (add-all-objects remove-collection (mapcar element-function '(4 5 6 7)))
      (add-all-objects collection add-collection)
      (ensure-same 4 (size collection)
		   :report (report-name collection-class "size 4 after add 5, 6, 7 (C)"))
      (ensure-same nil (empty-p collection)
		   :report (report-name collection-class "non empty after add 5, 6, 7 (C)"))
      (remove-all-objects collection remove-collection)
      (ensure-same 0 (size collection)
		   :report (report-name collection-class "size 0 after remove 4, 5, 6, 7 (C)"))
      (ensure-same t (empty-p collection)
		   :report (report-name collection-class "empty after remove 4, 5, 6, 7 (C)")))
    (add-all-objects collection (mapcar element-function '(1 2 3 4 5)))
    (let ((simple-iterator (iterator collection)))
      (ensure-same 15 (loop while (it-next simple-iterator)
			    sum (funcall de-e (it-current simple-iterator)))
		   :report (report-name collection-class "simple iterator count")))
    (let ((conditional-iterator (iterator collection
					  (lambda (number)
					    (evenp (funcall de-e number))))))
      (ensure-same 6 (loop while (it-next conditional-iterator)
			   sum (funcall de-e (it-current conditional-iterator)))
		   :report (report-name collection-class "conditional iterator count")))
    (let ((simple-iterator (iterator collection)))
      (it-next simple-iterator)
      (let ((removed-element (funcall de-e (it-current simple-iterator))))
	(remove-object collection simple-iterator)
	(ensure-same (- 15 removed-element)
		     (loop while (it-next simple-iterator)
			   sum (funcall de-e (it-current simple-iterator)))
		     :report (report-name collection-class "simple iterator count after remove"))))
    (ensure-same 4 (size collection)
		 :report (report-name collection-class "size 4 after remove with iterator"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after remove with iterator"))
    (clear collection)
    (add-all-objects collection (mapcar element-function '(1 2 3 4 5)))
    (let ((conditional-iterator (iterator collection
					  (lambda (number)
					    (oddp (funcall de-e number))))))
      (remove-all-objects collection conditional-iterator)
      (ensure-same 2 (size collection)
		   :report (report-name collection-class "size 2 after remove all in iterator odd numbers"))
      (ensure-same nil (empty-p collection)
		   :report (report-name collection-class "non empty after remove in iterator odd numbers")))
    (clear collection)
    (add-all-objects collection (mapcar element-function '(1 2 3 4 5)))
    (let ((all-found-iterator (find-all-objects collection
						(lambda (number)
						  (oddp (funcall de-e number))))))
      (ensure-same 9 (loop while (it-next all-found-iterator)
			   sum (funcall de-e (it-current all-found-iterator)))
		   :report (report-name collection-class "find-all-objects iterator count")))))

(defun test-list (list-class
		  constructor-function element-function de-e)
  (let ((list (funcall constructor-function)))
    (add-object list (funcall element-function 7))
    (add-object list (funcall element-function 7))
    (add-object list (funcall element-function 8))
    (add-object list (funcall element-function 9))
    (ensure-same 7 (funcall de-e (get-object-at list 0))
		 :report (report-name list-class "7 is at 0"))
    (ensure-same 7 (funcall de-e (get-object-at list 1))
		 :report (report-name list-class "7 is at 1"))
    (ensure-same 8 (funcall de-e (get-object-at list 2))
		 :report (report-name list-class "8 is at 2"))
    (ensure-same 9 (funcall de-e (get-object-at list 3))
		 :report (report-name list-class "9 is at 3"))
    (ensure-same 2 (index-of list (funcall element-function 8))
		 :report (report-name list-class "2 is index-of 8"))
    (set-object-at list 1 (funcall element-function 10))
    (ensure-same 10 (funcall de-e (get-object-at list 1))
		 :report (report-name list-class "10 is at 1 after set"))
    (insert-object-before list 1 (funcall element-function 11))
    (insert-object-after list 2 (funcall element-function 12))
    (ensure-same 11 (funcall de-e (get-object-at list 1))
		 :report (report-name list-class "11 is at 1 after insert b"))
    (ensure-same 12 (funcall de-e (get-object-at list 3))
		 :report (report-name list-class "12 is at 1 after insert a"))
    (ensure-same 6 (size list)
		 :report (report-name list-class "size 6 after insert 11, 12"))
    (insert-all-objects-before list 6 (mapcar element-function '(1 2)))
    (ensure-same 1 (funcall de-e (get-object-at list 6))
		 :report (report-name list-class "1 is at 6 after insert b a"))
    (ensure-same 2 (funcall de-e (get-object-at list 7))
		 :report (report-name list-class "2 is at 7 after insert b a"))
    (insert-all-objects-after list 7 (mapcar element-function '(3 4)))
    (ensure-same 3 (funcall de-e (get-object-at list 8))
		 :report (report-name list-class "3 is at 8 after insert a a"))
    (ensure-same 4 (funcall de-e (get-object-at list 9))
		 :report (report-name list-class "4 is at 9 after insert a a"))
    (let ((add-collection (funcall constructor-function)))
      (add-all-objects add-collection (mapcar element-function '(15 16)))
      (insert-all-objects-before list 0 add-collection)
      (ensure-same 15 (funcall de-e (get-object-at list 0))
		   :report (report-name list-class "15 is at 0 after insert b a"))
      (ensure-same 16 (funcall de-e (get-object-at list 1))
		   :report (report-name list-class "16 is at 1 after insert b a"))
      (ensure-same 7 (funcall de-e (get-object-at list 2))
		   :report (report-name list-class "7 is at 2 after insert b a")))
    (let ((add-collection (funcall constructor-function)))
      (add-all-objects add-collection (mapcar element-function '(17 18)))
      (insert-all-objects-after list -1 add-collection)
      (ensure-same 17 (funcall de-e (get-object-at list 0))
		   :report (report-name list-class "17 is at 0 after insert a a"))
      (ensure-same 18 (funcall de-e (get-object-at list 1))
		   :report (report-name list-class "18 is at 1 after insert a a"))
      (ensure-same 15 (funcall de-e (get-object-at list 2))
		   :report (report-name list-class "15 is at 2 after insert a a")))
    (insert-all-objects-before
     list 0
     (make-instance 'built-in-list-iterator
		    :list (mapcar element-function '(19 20))))
    (ensure-same 19 (funcall de-e (get-object-at list 0))
		 :report (report-name list-class "19 is at 0 after insert b a"))
    (ensure-same 20 (funcall de-e (get-object-at list 1))
		 :report (report-name list-class "20 is at 1 after insert b a"))
    (ensure-same 17 (funcall de-e (get-object-at list 2))
		 :report (report-name list-class "17 is at 2 after insert b a"))
    (insert-all-objects-after
     list 0
     (make-instance 'built-in-list-iterator
		    :list (mapcar element-function '(21 22))))
    (ensure-same 19 (funcall de-e (get-object-at list 0))
		 :report (report-name list-class "19 is at 0 after insert a a"))
    (ensure-same 21 (funcall de-e (get-object-at list 1))
		 :report (report-name list-class "21 is at 1 after insert a a"))
    (ensure-same 22 (funcall de-e (get-object-at list 2))
		 :report (report-name list-class "22 is at 2 after insert a a"))
    (ensure-same 20 (funcall de-e (get-object-at list 3))
		 :report (report-name list-class "23 is at 3 after insert a a"))
    (remove-object-at list 0)
    (ensure-same 21 (funcall de-e (get-object-at list 0))
		 :report (report-name list-class "21 is at 0 after remove at 0"))))
