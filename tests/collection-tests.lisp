;;; -*- lisp -*-

(in-package :ru.bazon.bazon-collections-tests)

(defun report-name (collection-class name)
  (format nil "~a: ~a" collection-class name))

(defun test-collection (collection-class constructor-function)
  (let ((collection (funcall constructor-function)))
    (ensure-same 0 (size collection)
		 :report (report-name collection-class "size 0"))
    (ensure-same t (empty-p collection)
		 :report (report-name collection-class "empty at begin"))
    (add-object collection 0)
    (ensure-same 1 (size collection)
		 :report (report-name collection-class "size 1 after add 0"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after add 0"))
    (ensure-same t (contains collection 0)
		 :report (report-name collection-class "contains added 0"))
    (ensure-same 0 (it-current (find-object collection 0))
		 :report (report-name collection-class "0 is that one found by iterator"))
    (clear collection)
    (ensure-same 0 (size collection)
		 :report (report-name collection-class "size 0 after clear"))
    (ensure-same t (empty-p collection)
		 :report (report-name collection-class "empty after clear"))
    (add-object collection 0)
    (add-object collection 1)
    (ensure-same 2 (size collection)
		 :report (report-name collection-class "size 2 after add 0, 1"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after add 0, 1"))
    (remove-object collection 0)
    (ensure-same 1 (size collection)
		 :report (report-name collection-class "size 1 after remove 0"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after remove 0"))
    (ensure-same nil (find-object collection 0)
		 :report (report-name collection-class "0 not found after removing it"))
    (add-all-objects collection '(2 3 4))
    (ensure-same 4 (size collection)
		 :report (report-name collection-class "size 4 after add 2, 3, 4"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after add 2, 3, 4"))
    (remove-all-objects collection '(1 2 3))
    (ensure-same 1 (size collection)
		 :report (report-name collection-class "size 1 after remove 1, 2, 3"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after remove 1, 2, 3"))
    (let ((add-collection (funcall constructor-function))
	  (remove-collection (funcall constructor-function)))
      (add-all-objects add-collection '(5 6 7))
      (add-all-objects remove-collection '(4 5 6 7))
      (add-all-objects collection add-collection)
      (ensure-same 4 (size collection)
		   :report (report-name collection-class "size 4 after add 5, 6, 7 (C)"))
      (ensure-same nil (empty-p collection)
		   :report (report-name collection-class "non empty after add 5, 6, 7 (C)"))
      (remove-all-objects collection remove-collection)
      (ensure-same 0 (size collection)
		   :report (report-name collection-class "size 0 after remove 4, 5, 6, 7 (C)"))
      (ensure-same t (empty-p collection)
		   :report (report-name collection-class "empty after remove 4, 5, 6, 7 (C)"))
      )
    (add-all-objects collection '(1 2 3 4 5))
    (let ((simple-iterator (iterator collection)))
      (ensure-same 15 (loop while (it-next simple-iterator)
			 sum (it-current simple-iterator))
		   :report (report-name collection-class "simple iterator count")))
    (let ((conditional-iterator (iterator collection
					  (lambda (number)
					    (evenp number)))))
      (ensure-same 6 (loop while (it-next conditional-iterator)
			sum (it-current conditional-iterator))
		   :report (report-name collection-class "conditional iterator count")))
    (let ((simple-iterator (iterator collection)))
      (it-next simple-iterator)
      (let ((removed-element (it-current simple-iterator)))
	(remove-object-at-iterator collection simple-iterator)
	(let ((new-iterator (iterator collection)))
	  (ensure-same (- 15 removed-element)
		       (loop while (it-next new-iterator)
			  sum (it-current new-iterator))
		       :report (report-name collection-class "simple iterator count after remove")))))
    (ensure-same 4 (size collection)
		 :report (report-name collection-class "size 4 after remove with iterator"))
    (ensure-same nil (empty-p collection)
		 :report (report-name collection-class "non empty after remove with iterator"))
    (clear collection)
    (add-all-objects collection '(1 2 3 4 5))))
